#labels Featured
Documentation for the `portlet.py` module

= Introduction =

The `portlet.py` module wraps the JSR-168 API to make is super simple to program portlets using Python syntax.

= Examples =
The `portlet.Portlet` class delegates calls to `render` and `processAction` to `view` and `action`, respectively. The request / response objects are then wrapped in python objects that implement many of the __ methods for nicer syntax.

== Hello World ==
This portlet demonstrates how to send output to the response using the `<<` operator for C++ style output.
{{{
from portlet import Portlet

class HelloPortlet (Portlet):
    def view(self, request, response):
        response << '<h2>Hello Jython</h2>'
}}}

== Accessing parameters ==
This portlet demonstrates how to check if a parameter is in the request and how to access it. It also shows how to use the `response.view(**params)` method to create portlet render URLs. To create an action URL, use `response.action(**params)`.
{{{
class NamePortlet (Portlet):
    def view(self, request, response):
        if 'name' in request:
            response << '<p>Hello ' << request['name'] << '</p>'
	    response << '<a href="' << response.view() << '">Bye!</a>'
}}}

== Complex Example ==
This portlet does a lot of stuff to demonstrate what is possible. Not that you would under normal circumstances not generate the HTML in the class but instead dispatch to a template. 
{{{
class JythonPortlet (Portlet):
    def view(self, request, response):
        response << '<h2>Hello Jython</h2>'

        if 'name' in request:
            response << '<p>Hello ' << request['name'] << '</p>'
	    response << '<a href="' << response.view() << '">Bye!</a>'

	elif 'page' in request:
            self.dispatch('/' + request['page'] + '.jsp', request, response)

	else:
            response << '<a href="' << response.view(page='index') << '">Index</a>' \
             '<form action="' << response.action() << '"' <<  """
               <input type="text" name="name"/>
               <input type="submit" />
              </form> """ 
	    response << '<a href="' << response.action(name='Vidar') << '">I am Vidar!</a>'

            if 'previous' in request.session:
    	        response << '<p>' << request.session['previous'] << ' was here.</p>'

    def action(self, request, response):
        name = request['name']
        response.name = name
	request.session['previous'] = name
}}}